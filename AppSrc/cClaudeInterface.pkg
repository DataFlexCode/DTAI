Use cAIResponseTranslator.pkg
Use cMultipartFormdataTransfer.pkg

Class cClaudeInterface is a cAIInterface

    Procedure construct_object
        Forward Send Construct_Object
        
        Set peTransferFlags to ifSecure
        Set piRemotePort to rpHttpSSL
        
        Property String psHost "api.anthropic.com"
        Property String psAnthropicVersion "2023-06-01"
        Property String psModelId "claude-sonnet-4-20250514"
        Property Integer piMaxTokens 8192
        // set to true if using files API
        Property Boolean pbEnableFilesApi False  // tells AddStandardHeaders to add the necessary header for beta files API

        Set psApiKey to (EnvironmentVariable(ghoEnvironment,'claude-api-key')) 
        
        Object oClaudeRequest is a cClaudeRequest
        End_Object
        
        Object oClaudeTranslator is a cClaudeTranslator
        End_Object
    End_Procedure

    Procedure end_construct_object
        Forward Send End_Construct_Object
    End_Procedure
    
    Procedure AddStandardHeaders String sContentType
        Integer iRetVal 
        Set pbClearHeaders to False
        Send ClearHeaders
        If (num_arguments=0) Get AddHeader "Content-Type" "application/json" to iRetVal
        Else Get AddHeader "Content-Type" sContentType to iRetVal
        Get AddHeader "x-api-key" (psApiKey(Self)) to iRetVal
        Get AddHeader "anthropic-version" (psAnthropicVersion(Self)) to iRetVal
        If (pbEnableFilesApi(Self)) Get AddHeader "anthropic-beta" "files-api-2025-04-14" to iRetVal
    End_Procedure
    
    // returns a handle to a valid response JSON object that is intended to be be deserialized 
    //  into a struct.  If error, display message and return 0
    Function MakeRequestJSON Handle hoRequest Returns Handle
        Integer iRetVal
        Handle hoResponse hoError
        String sResponseType sMessage
        Boolean bOk
        
        If (CheckApiKeyExists(Self)) Begin 
            Send AddStandardHeaders
            Get httpPostJson (psHost(Self)) "v1/messages" hoRequest (&bOk) to hoResponse
            If (not(bOk)) Begin
                Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
            End
            Else Begin
                Send RemoveNullMembers hoResponse
                // check for error and display
                Get MemberValue of hoResponse "type" to sResponseType
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType   
                    //
                    Send Destroy of hoResponse
                    Move 0 to hoResponse
                End
            End
        End
        
        Function_Return hoResponse
    End_Function
    
    Function ModelList Returns tAIModel[]
        Boolean bOk
        Handle hoResponse
        tClaudeModelList claudeModelList
        tAIModel[] ModelList        
        Integer i iCnt
            
        Get paModels to ModelList
        If (SizeOfArray(ModelList)=0) Begin
            If (CheckApiKeyExists(Self)) begin
                Send AddStandardHeaders
                Get HttpGetJson (psHost(Self)) "v1/models" (&bok) to hoResponse
                If (not(bOk)) Begin
                    Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
                End
                Else Begin
                    Get JsonToDataType of hoResponse to claudeModelList
                    Send Destroy of hoResponse
                End
                Move (Sizeofarray(claudeModelList.data)-1) to iCnt
                For i from 0 to iCnt
                    Move (claudeModellist.data[i].id) to ModelList[i].id
                    Move (claudeModellist.data[i].display_name) to ModelList[i].display_name
                    Move (claudeModellist.data[i].created_at) to ModelList[i].created_at
                    Move (claudeModellist.data[i].type) to ModelList[i].type
                Loop
                Set paModels to ModelList
            End
        End        
        Function_Return ModelList
    End_Function
    
    Function CreateRequest String sPrompt tAIAttachment[] Attachments Returns Handle 
        Handle hoRequest
        tClaudeAttachment[] NoAttachments
        
        If (num_arguments=1) Get CreateClaudeApiRequest of (oClaudeRequest(Self)) sPrompt NoAttachments to hoRequest
        If (num_arguments=2) Get CreateClaudeApiRequest of (oClaudeRequest(Self)) sPrompt Attachments to hoRequest
        Function_Return hoRequest
    End_Function
    
    Function MakeRequest Handle hoRequest Returns tAIResponse
        Handle hoResponse
        tClaudeResponse ClaudeResponse
        tAIResponse Response
        
        Get MakeRequestJSON hoRequest to hoResponse
        If (hoResponse) Begin
            Set peWhiteSpace of hoResponse to jpWhitespace_Pretty
            Set psModelResponseJson to (Stringify(hoResponse))
            Set pbRequireAllMembers of hoResponse to False
            Get JsonToDataType of hoResponse to ClaudeResponse
            Send Destroy of hoResponse
            //
            Get TranslateToUnified of oClaudeTranslator ClaudeResponse to Response
        End
        
        Function_Return Response
    End_Function
    
    // Files API in beta
    Function ClaudeFileList Returns tClaudeModelList
        Boolean bOk bTypeExists
        Handle hoResponse hoError 
        String sResponse sMessage sResponseType
        tClaudeModelList ModelList
        tClaudeFileList FileList
        
        Set pbEnableFilesApi to True
        Send AddStandardHeaders
        Get HttpGetJson (psHost(Self)) "v1/files" (&bok) to hoResponse
        If (not(bOk)) Begin
            Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
        End
        Else Begin
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType       
                    Send Destroy of hoError         
                End
            End
            Else Begin
                Get JsonToDataType of hoResponse to FileList
                Send Destroy of hoResponse
            End
        End
        Function_Return FileList
    End_Function

    // TODO Test this!
    // returns true if file is deleted
    Function ClaudeFileMetaData String sFileID Returns Boolean
        Boolean bOk bTypeExists bRetVal
        Handle hoResponse hoError 
        String sResponse sMessage sResponseType
        tClaudeModelList ModelList
        tClaudeFile FileMetaData
                
        Set pbEnableFilesApi to True
        Send AddStandardHeaders
        Get HttpGetJson (psHost(Self)) ("v1/files/"+sFileID) (&bok) to hoResponse
        If (not(bOk)) Begin
            Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
        End
        Else Begin
            // response for a successful deletion is a JSON object with id (file id) and type members
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                Move (sResponseType='file_deleted') to bRetVal
                
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType       
                    Send Destroy of hoError         
                End
            End
        End
        Function_Return bRetVal
    End_Function

    // Uploads a file to the Claude API
    // Parameters:
    //   sFilename - Path to the file to upload
    // Returns:
    //   String file ID of the uploaded file
    Function UploadFile String sFilename Returns String 
        Boolean bOk bJsonOk
        Handle hoUploader hoResponse
        String sResponse sMessage sResponseType
        tClaudeResponseUploadFile Response
        Integer iRetVal
        
        Set pbEnableFilesApi to True

        Get Create (RefClass(cMultipartFormdataTransfer)) to hoUploader
        Set peTransferFlags of hoUploader to ifSecure
        Set piRemotePort of hoUploader to rpHttpSSL
        Set pbClearHeaders of hoUploader to False
        
        // Add required headers
        Get AddHeader of hoUploader "x-api-key" (psApiKey(Self)) to iRetVal
        Get AddHeader of hoUploader "anthropic-version" (psAnthropicVersion(Self)) to iRetVal
        Get AddHeader of hoUploader "anthropic-beta" "files-api-2025-04-14" to iRetVal
        Get AddHeader of hoUploader "Accept" "application/json" to iRetVal
        
        // Add the file to upload
        Send AddFile of hoUploader "file" sFilename "application/octet-stream"
        
        // Perform the upload
        Get HttpPostFiles of hoUploader (psHost(Self)) "/v1/files" to bOk
        
        If (not(bOk)) Begin
            Integer iStatus
            Get ResponseStatusCode of hoUploader to iStatus
            Error DFERR_PROGRAM ("File upload failed with status: " + String(iStatus))
            Function_Return ""
        End
        
        // Parse JSON response
        Get ResponseJson of hoUploader (&bJsonOk) to hoResponse
        
        If (bJsonOk) Begin
            Boolean bTypeExists
            Handle hoError
            
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType            
                    Send Destroy of hoError    
                End
            End
            Else Begin
                Get JsonToDataType of hoResponse to Response
            End
        End
        Else Begin
            Get ResponseString of hoUploader to sResponse
            Error DFERR_PROGRAM ("Error parsing file upload response:" * sResponse)
        End
        
        If (hoResponse) Begin
            Send Destroy of hoResponse
        End
        Send Destroy of hoUploader
        
        Function_Return Response.id
    End_Function
End_Class