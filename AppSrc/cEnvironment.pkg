// Global handle to the environment object that manages environment variables
// This is set in the cEnvironment constructor and can be used to access environment variables
// from anywhere in the application
Global_Variable Handle ghoEnvironment

Class cEnvironment is a cObject

    Procedure construct_object
        Forward Send Construct_Object
        Property String[][] pasEnvironment 

        Move Self to ghoEnvironment
    End_Procedure

    Procedure end_construct_object
        Forward Send End_Construct_Object
        
        Send ReadEnvironmentVariables        
    End_Procedure

    // Reads environment variables from a .env file in the application directory
    // The .env file should contain key=value pairs, one per line
    // The keys are converted to lowercase for case-insensitive lookups
    // The environment variables are stored in the pasEnvironment property
    // If no .env file exists, pasEnvironment will be empty
    Procedure ReadEnvironmentVariables
        String sProgram sProgramPath sEnv sEnvValue
        String[][2] asEnv
        Boolean bExist
        Handle hoWorkspace
        Integer i iCnt
        
        Get phoWorkspace of ghoApplication to hoWorkspace
        Get psProgram of ghoApplication to sProgram
        
        Get psProgramPath of hoWorkspace to sProgramPath
        If (sProgramPath='') Get_Current_Directory to sProgramPath
        Move (sProgrampath+'\'+sProgram+".env") to sProgram
        File_Exist sProgram bExist
        If (bExist) Begin
            Direct_Input sProgram
            While (not(SeqEof))
                Readln asEnv[SizeofArray(asEnv)][0]
            Loop
            Close_Input

            For i from 0 to (SizeOfArray(asEnv)-1)
                Move (StrSplitToArray(asEnv[i][0],'=')) to asEnv[i]
                Move (Lowercase(asEnv[i][0])) to asEnv[i][0]
            Loop
        End
        
        Set pasEnvironment to asEnv
    End_Procedure
    
    // Returns the value of an environment variable by looking first in the .env file
    // and then in the system environment variables if not found in .env
    // Parameters:
    //   sName - Name of environment variable to look up (case-insensitive)
    // Returns:
    //   String value of environment variable or empty string if not found
    Function EnvironmentVariable String sName Returns String
        String[][] asEnv
        String[][] sSearch
        Integer i iCnt
        String sRetVal
        
        // Get environment variables array from .env file
        Get pasEnvironment to asEnv
        // Convert name to lowercase for case-insensitive comparison
        Move (Lowercase(sName)) to sName
        Move (SizeOfArray(asEnv)) to iCnt
        // Search through .env variables
        For i from 0 to (iCnt-1)
            If (asEnv[i][0]=sName) Move asEnv[i][1] to sRetVal
        Loop
        
        // If not found in .env, check system environment variables
        If (sRetVal='') Get_Environment sName to sRetVal

        Function_Return sRetVal
    End_Function
End_Class

