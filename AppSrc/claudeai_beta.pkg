Use claudeai.pkg
Use cMultipartFormdataTransfer.pkg

// Files API is in beta as of 8/19/25

// TODO: retrieve meta data
// TODO: delete a file

Class cClaudeInterface_beta is a cClaudeInterface
    
    Procedure Construct_object
        Forward Send construct_object
        
        Set pbEnableFilesApi to True        // this will add the required header
    End_Procedure
    
    Function ClaudeFileList Returns tClaudeModelList
        Boolean bOk bTypeExists
        Handle hoResponse hoError 
        String sResponse sMessage sResponseType
        tClaudeModelList ModelList
        tClaudeFileList FileList
        
        Send AddStandardHeaders
        Get HttpGetJson (psHost(Self)) "v1/files" (&bok) to hoResponse
        If (not(bOk)) Begin
            Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
        End
        Else Begin
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType       
                    Send Destroy of hoError         
                End
            End
            Else Begin
                Get JsonToDataType of hoResponse to FileList
                Send Destroy of hoResponse
            End
        End
        Function_Return FileList
    End_Function

    // TODO Test this!
    // returns true if file is deleted
    Function ClaudeFileMetaData String sFileID Returns Boolean
        Boolean bOk bTypeExists bRetVal
        Handle hoResponse hoError 
        String sResponse sMessage sResponseType
        tClaudeModelList ModelList
        tClaudeFile FileMetaData
                
        Send AddStandardHeaders
        Get HttpGetJson (psHost(Self)) ("v1/files/"+sFileID) (&bok) to hoResponse
        If (not(bOk)) Begin
            Send UserError (TransferErrorDescription(Self)) "Transfer failed!"
        End
        Else Begin
            // response for a successful deletion is a JSON object with id (file id) and type members
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                Move (sResponseType='file_deleted') to bRetVal
                
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType       
                    Send Destroy of hoError         
                End
            End
        End
        Function_Return bRetVal
    End_Function

    // Uploads a file to the Claude API
    // Parameters:
    //   sFilename - Path to the file to upload
    // Returns:
    //   String file ID of the uploaded file
    Function UploadFile String sFilename Returns String 
        Boolean bOk bJsonOk
        Handle hoUploader hoResponse
        String sResponse sMessage sResponseType
        tClaudeResponseUploadFile Response
        Integer iRetVal
        
        Get Create (RefClass(cMultipartFormdataTransfer)) to hoUploader
        Set peTransferFlags of hoUploader to ifSecure
        Set piRemotePort of hoUploader to rpHttpSSL
        Set pbClearHeaders of hoUploader to False
        
        // Add required headers
        Get AddHeader of hoUploader "x-api-key" (psApiKey(Self)) to iRetVal
        Get AddHeader of hoUploader "anthropic-version" (psAnthropicVersion(Self)) to iRetVal
        Get AddHeader of hoUploader "anthropic-beta" "files-api-2025-04-14" to iRetVal
        Get AddHeader of hoUploader "Accept" "application/json" to iRetVal
        
        // Add the file to upload
        Send AddFile of hoUploader "file" sFilename "application/octet-stream"
        
        // Perform the upload
        Get HttpPostFiles of hoUploader (psHost(Self)) "/v1/files" to bOk
        
        If (not(bOk)) Begin
            Integer iStatus
            Get ResponseStatusCode of hoUploader to iStatus
            Error DFERR_PROGRAM ("File upload failed with status: " + String(iStatus))
            Function_Return ""
        End
        
        // Parse JSON response
        Get ResponseJson of hoUploader (&bJsonOk) to hoResponse
        
        If (bJsonOk) Begin
            Boolean bTypeExists
            Handle hoError
            
            Get HasMember of hoResponse "type" to bTypeExists
            If (bTypeExists) Begin
                Get MemberValue of hoResponse "type" to sResponseType
                If (sResponseType='error') Begin
                    Get Member of hoResponse "error" to hoError
                    Get MemberValue of hoError "type" to sResponseType
                    Get MemberValue of hoError "message" to sMessage
                    Send Stop_Box sMessage sResponseType            
                    Send Destroy of hoError    
                End
            End
            Else Begin
                Get JsonToDataType of hoResponse to Response
            End
        End
        Else Begin
            Get ResponseString of hoUploader to sResponse
            Error DFERR_PROGRAM ("Error parsing file upload response:" * sResponse)
        End
        
        If (hoResponse) Begin
            Send Destroy of hoResponse
        End
        Send Destroy of hoUploader
        
        Function_Return Response.id
    End_Function
    
End_Class

Object oClaudeAI is a cClaudeInterface_beta
    If (ghoClaudeAI) Send Destroy of ghoClaudeAI
    Move Self to ghoClaudeAI
End_Object